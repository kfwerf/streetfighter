// Generated by CoffeeScript 1.7.1

/**
 * 
 * @author Kenneth van der Werf
 * @class moves
 * @package abstract/movement/moves
 * @description The base class from which actors are derived.
 * --
 * @param  {Class} createjs Framework for canvas game operations
 * @param  {Class} radio    Event emitter and receiver system
 * @return {Class}          Moves list
 */

(function() {
  define(['keypress'], function(keypress) {
    var Moves;
    return Moves = (function() {
      function Moves(objKeyBindings) {
        var objValue, strKey, _ref;
        this.objKeyBindings = objKeyBindings;
        this.strCurrentMove = 'IDLE';
        this.strCurrentState = 'IDLE';
        this.objKeyListener = new keypress.Listener();
        this.objMoves = {
          'MOVE_LEFT': {
            'keys': this.getCombination('left'),
            'prevent_repeat': true,
            'on_keydown': function() {
              return this.setMove('MOVE_LEFT', 'MOVING');
            },
            'on_keyup': function() {
              return this.setMove('IDLE', 'IDLE');
            },
            'this': this
          },
          'MOVE_RIGHT': {
            'keys': this.getCombination('right'),
            'prevent_repeat': true,
            'on_keydown': function() {
              return this.setMove('MOVE_RIGHT', 'MOVING');
            },
            'on_keyup': function() {
              return this.setMove('IDLE', 'IDLE');
            },
            'this': this
          },
          'JUMP': {
            'keys': this.getCombination('up'),
            'on_keydown': function() {
              return this.setMove('JUMP', 'JUMPING');
            },
            'on_keyup': function() {
              return this.setMove('IDLE', 'IDLE');
            },
            'this': this
          },
          'CROUCH': {
            'keys': this.getCombination('down'),
            'on_keydown': function() {
              return this.setMove('CROUCH', 'CROUCHING');
            },
            'on_keyup': function() {
              return this.setMove('IDLE', 'IDLE');
            },
            'this': this
          },
          'PUNCH': {
            'keys': this.getCombination('action_one'),
            'is_counting': true,
            'prevent_repeat': true,
            'on_keydown': function() {
              return this.setMove('PUNCH', 'PUNCHING');
            },
            'on_keyup': function() {
              return this.setMove('IDLE', 'IDLE');
            },
            'this': this
          }
        };
        _ref = this.objMoves;
        for (strKey in _ref) {
          objValue = _ref[strKey];
          this.objKeyListener.register_combo(this.objMoves[strKey]);
        }
      }

      Moves.prototype.setMove = function(strCurrentMove, strCurrentState) {
        this.strCurrentMove = strCurrentMove;
        this.strCurrentState = strCurrentState;
      };

      Moves.prototype.getCombination = function(strCombination) {
        var arrCombination, arrDecodedCombination, strKey, _i, _len;
        console.log(strCombination);
        if (this.objKeyBindings) {
          arrDecodedCombination = [];
          arrCombination = strCombination.split(' ');
          for (_i = 0, _len = arrCombination.length; _i < _len; _i++) {
            strKey = arrCombination[_i];
            arrDecodedCombination.push(this.objKeyBindings[strKey]);
          }
          return arrDecodedCombination.join(' ');
        }
      };

      Moves.prototype.current = function() {
        return {
          action: this[this.strCurrentMove],
          move: this.strCurrentMove,
          state: this.strCurrentState
        };
      };

      Moves.prototype.MOVE_LEFT = function() {
        return {
          x: 5,
          y: 0
        };
      };

      Moves.prototype.MOVE_RIGHT = function() {};

      Moves.prototype.CROUCH = function() {};

      Moves.prototype.PUNCH = function() {};

      return Moves;

    })();
  });

}).call(this);
