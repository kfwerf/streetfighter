// Generated by CoffeeScript 1.7.1

/**
 * Base class for usage on the stage
 * @author Kenneth van der Werf
 * @class actor
 * @package abstract/actors
 * @description The base class from which actors are derived.
 * --
 * @param  {Class} createjs Framework for canvas game operations
 * @param  {Class} radio    Event emitter and receiver system
 * @return {Class}          Actor Base Class. Usage as a base to create actors on the stage with.
 */

(function() {
  define(['createjs'], function(createjs, radio) {
    var Actor;
    return Actor = (function() {
      function Actor() {
        this.strName = 'Actor';
        this.strDescription = 'A Actor on the stage.';
        this.strUID = (function() {
          var i, numString, numTotal, _i;
          numTotal = 10;
          numString = '';
          for (i = _i = 0; _i < numTotal; i = _i += 1) {
            numString = numString + Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
          }
          return numString;
        })();
        this.objContainer = new createjs.Container();
        this.objSpritesLoader = new createjs.LoadQueue(true);
        this.objSpritesLoader.on('complete', this.onSpritesLoaded, this);
      }

      Actor.prototype.loadSprites = function(objManifest) {
        var arrManifest;
        arrManifest = (function() {
          var strId, _results;
          _results = [];
          for (strId in objManifest) {
            _results.push({
              id: strId,
              src: objManifest[strId]
            });
          }
          return _results;
        })();
        return this.objSpritesLoader.loadManifest(arrManifest);
      };

      Actor.prototype.onSpritesLoaded = function() {
        this.objSpritesheet = new createjs.SpriteSheet(this.objSpritesLoader.getResult('SPRITESHEET_JSON'));
        return this.setAnimation('IDLE');
      };

      Actor.prototype.setAnimation = function(strType) {
        if (strType == null) {
          strType = 'IDLE';
        }
        if (this.objSpritesheet) {
          this.objContainer.removeAllChildren();
          return this.objContainer.addChild(new createjs.Sprite(this.objSpritesheet, strType));
        }
      };

      return Actor;

    })();
  });

}).call(this);
